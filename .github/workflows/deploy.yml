name: Deploy Contracts

on:
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

  deploy-evm-testnet:
    needs: prepare
    runs-on: ubuntu-latest
    environment: testnet
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        
    - name: Install Dependencies
      run: npm install
        
    - name: Deploy to Ethereum Goerli
      run: npx hardhat run scripts/deploy.ts --network goerli
      env:
        INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        
    - name: Deploy to Avalanche Fuji
      run: npx hardhat run scripts/deploy.ts --network fuji
      env:
        AVALANCHE_API_KEY: ${{ secrets.AVALANCHE_API_KEY }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        
    - name: Deploy to SKALE Testnet
      run: npx hardhat run scripts/deploy.ts --network skale-testnet
      env:
        SKALE_ENDPOINT: ${{ secrets.SKALE_TESTNET_ENDPOINT }}
        PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        
    - name: Verify Contracts
      run: |
        npx hardhat verify --network goerli ${{ env.GOERLI_CONTRACT_ADDRESS }}
        npx hardhat verify --network fuji ${{ env.FUJI_CONTRACT_ADDRESS }}
        
    - name: Store Deployment Info
      run: |
        echo "Deployment Info for version ${{ needs.prepare.outputs.version }}" > deployment.txt
        echo "Goerli: ${{ env.GOERLI_CONTRACT_ADDRESS }}" >> deployment.txt
        echo "Fuji: ${{ env.FUJI_CONTRACT_ADDRESS }}" >> deployment.txt
        echo "SKALE: ${{ env.SKALE_CONTRACT_ADDRESS }}" >> deployment.txt
        
    - name: Upload Deployment Info
      uses: actions/upload-artifact@v3
      with:
        name: deployment-info
        path: deployment.txt

  deploy-solana-testnet:
    needs: prepare
    runs-on: ubuntu-latest
    environment: testnet
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.17.0/install)"
        export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
        
    - name: Install Anchor CLI
      run: npm install -g @coral-xyz/anchor-cli
        
    - name: Build Programs
      run: anchor build
        
    - name: Deploy to Devnet
      run: |
        solana config set --url devnet
        anchor deploy --provider.cluster devnet
      env:
        ANCHOR_WALLET: ${{ secrets.SOLANA_KEYPAIR }}
        
    - name: Store Program IDs
      run: |
        echo "Solana Program IDs for version ${{ needs.prepare.outputs.version }}" > solana-deployment.txt
        echo "Bridge Program: $(solana address -k target/deploy/bridge-keypair.json)" >> solana-deployment.txt
        
    - name: Upload Program IDs
      uses: actions/upload-artifact@v3
      with:
        name: solana-deployment-info
        path: solana-deployment.txt

  deploy-mainnet:
    needs: [prepare, deploy-evm-testnet, deploy-solana-testnet]
    runs-on: ubuntu-latest
    environment: mainnet
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-rc')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        
    - name: Install Dependencies
      run: npm install
        
    - name: Deploy to Ethereum Mainnet
      run: npx hardhat run scripts/deploy.ts --network mainnet
      env:
        INFURA_API_KEY: ${{ secrets.INFURA_API_KEY }}
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        
    - name: Deploy to Avalanche Mainnet
      run: npx hardhat run scripts/deploy.ts --network avalanche
      env:
        AVALANCHE_API_KEY: ${{ secrets.AVALANCHE_API_KEY }}
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        
    - name: Deploy to SKALE Mainnet
      run: npx hardhat run scripts/deploy.ts --network skale-mainnet
      env:
        SKALE_ENDPOINT: ${{ secrets.SKALE_MAINNET_ENDPOINT }}
        PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
        
    - name: Deploy to Solana Mainnet
      run: |
        solana config set --url mainnet-beta
        anchor deploy --provider.cluster mainnet
      env:
        ANCHOR_WALLET: ${{ secrets.SOLANA_MAINNET_KEYPAIR }}
        
    - name: Store Mainnet Deployment Info
      run: |
        echo "Mainnet Deployment Info for version ${{ needs.prepare.outputs.version }}" > mainnet-deployment.txt
        echo "Ethereum: ${{ env.ETH_CONTRACT_ADDRESS }}" >> mainnet-deployment.txt
        echo "Avalanche: ${{ env.AVAX_CONTRACT_ADDRESS }}" >> mainnet-deployment.txt
        echo "SKALE: ${{ env.SKALE_MAINNET_ADDRESS }}" >> mainnet-deployment.txt
        echo "Solana: $(solana address -k target/deploy/bridge-keypair.json)" >> mainnet-deployment.txt
        
    - name: Upload Mainnet Deployment Info
      uses: actions/upload-artifact@v3
      with:
        name: mainnet-deployment-info
        path: mainnet-deployment.txt 